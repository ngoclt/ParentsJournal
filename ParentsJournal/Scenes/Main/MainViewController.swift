//
//  MainViewController.swift
//  ParentsJournal
//
//  Created by Ngoc Tuan Le on 4/14/19.
//  Copyright (c) 2019 LifeOfCoder. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainDisplayLogic: class {
  func setupView()
  func openNewPostScreen()
}

class MainViewController: UITabBarController {
  private static let RAISED_BUTTON_SIZE: CGFloat = 68
  private static let RAISED_BUTTON_MARGIN: CGFloat = 8
  
  var interactor: MainBusinessLogic?
  var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = MainInteractor()
    let presenter = MainPresenter()
    let router = MainRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("navigateTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  var raisedButton: UIButton!
  
  override func viewDidLoad() {
    super.viewDidLoad()
    interactor?.setupView()
  }
}

extension MainViewController: MainDisplayLogic {
    
  func setupView() {
    self.delegate = self
    
    let buttonSize = MainViewController.RAISED_BUTTON_SIZE
    
    raisedButton = UIButton(type: .custom)
    raisedButton.setImage(UIImage(named: "ButtonAdd"), for: .normal)
    raisedButton.frame = CGRect(x: 0, y: 0, width: buttonSize, height: buttonSize)
    raisedButton.translatesAutoresizingMaskIntoConstraints = false
    
    raisedButton.addTarget(self, action: #selector(didTapOnRaisedButton), for: .touchUpInside)
    
    view.insertSubview(raisedButton, aboveSubview: tabBar)
    
    let guide = view.safeAreaLayoutGuide
    raisedButton.centerXAnchor.constraint(equalTo: guide.centerXAnchor).isActive = true
    raisedButton.bottomAnchor.constraint(equalTo: guide.bottomAnchor, constant: -MainViewController.RAISED_BUTTON_MARGIN).isActive = true
    raisedButton.heightAnchor.constraint(equalToConstant: buttonSize).isActive = true
    raisedButton.widthAnchor.constraint(equalToConstant: buttonSize).isActive = true
  }
  
  func openNewPostScreen() {
    router?.navigateToNewPost(segue: nil)
  }
  
  @objc func didTapOnRaisedButton() {
    openNewPostScreen()
  }
}

extension MainViewController: UITabBarControllerDelegate {
    
    func tabBarController(_ tabBarController: UITabBarController,
                          shouldSelect viewController: UIViewController) -> Bool {
        
        if viewController.isKind(of: NewPostViewController.self) {
            router?.navigateToNewPost(segue: nil)
            return false
        }
        
        return true
    }
}
